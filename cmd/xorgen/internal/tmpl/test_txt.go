// Code generated by xorgen, DO NOT EDIT.
package tmpl

import (
	"bytes"
	"compress/gzip"
	"github.com/saylorsolutions/gocryptx/pkg/xor"
	"io"
)

func UnscreenTest_txt() ([]byte, error) {
	key := []byte{0xa8, 0x40, 0x13, 0x30, 0x25, 0x63, 0x26, 0xf6, 0xdc, 0xfc, 0x1d, 0xed, 0x44, 0x29, 0x10, 0x85, 0x2a, 0x6a, 0xfa, 0xd3}
	data := []byte{0x5f, 0x98, 0x38, 0x25, 0x63, 0x26, 0xf6, 0xdc, 0xfe, 0xe2, 0x9f, 0x10, 0x1, 0x59, 0xa8, 0x4, 0x3b, 0x32, 0x9e, 0x85, 0x6e, 0x5d, 0x7c, 0x6a, 0x36, 0xe, 0x3f, 0x94, 0xd0, 0x4c, 0xc5, 0x8a, 0xe1, 0x3f, 0x48, 0x63, 0x3b, 0xb2, 0x99, 0xfd, 0x68, 0x5d, 0x1e, 0x6f, 0x2e, 0xeb, 0xbd, 0x91, 0xfd, 0x19, 0xed, 0x44, 0xd6, 0xef, 0x2e, 0x3f, 0x71, 0x70, 0xf5, 0xa8, 0x40, 0x13}
	offset := 1
	r, err := xor.NewReader(bytes.NewReader(data), key, offset)
	if err != nil {
		return nil, err
	}
	uncompress, err := gzip.NewReader(r)
	if err != nil {
		return nil, err
	}
	var out bytes.Buffer
	_, err = io.Copy(&out, uncompress)
	if err != nil {
		return nil, err
	}
	uncompress.Close()
	return out.Bytes(), nil
}

func StreamTest_txt() (io.Reader, error) {
	key := []byte{0xa8, 0x40, 0x13, 0x30, 0x25, 0x63, 0x26, 0xf6, 0xdc, 0xfc, 0x1d, 0xed, 0x44, 0x29, 0x10, 0x85, 0x2a, 0x6a, 0xfa, 0xd3}
	data := []byte{0x5f, 0x98, 0x38, 0x25, 0x63, 0x26, 0xf6, 0xdc, 0xfe, 0xe2, 0x9f, 0x10, 0x1, 0x59, 0xa8, 0x4, 0x3b, 0x32, 0x9e, 0x85, 0x6e, 0x5d, 0x7c, 0x6a, 0x36, 0xe, 0x3f, 0x94, 0xd0, 0x4c, 0xc5, 0x8a, 0xe1, 0x3f, 0x48, 0x63, 0x3b, 0xb2, 0x99, 0xfd, 0x68, 0x5d, 0x1e, 0x6f, 0x2e, 0xeb, 0xbd, 0x91, 0xfd, 0x19, 0xed, 0x44, 0xd6, 0xef, 0x2e, 0x3f, 0x71, 0x70, 0xf5, 0xa8, 0x40, 0x13}
	offset := 1
	r, err := xor.NewReader(bytes.NewReader(data), key, offset)
	if err != nil {
		return nil, err
	}
	return gzip.NewReader(r)
}
