// Code generated by xorgen, DO NOT EDIT.
package tmpl

import (
	"bytes"
	"compress/gzip"
	"github.com/saylorsolutions/gocryptx/pkg/xor"
	"io"
)

func UnscreenTest_txt() ([]byte, error) {
	key := []byte{0xba, 0x15, 0xf1, 0x45, 0x9d, 0xa9, 0xad, 0x37, 0x22, 0x25, 0xbc, 0x37, 0x82, 0x9f, 0x42, 0xae, 0x10, 0x28, 0xfb, 0x87, 0xc7, 0x12, 0xff, 0x68, 0xba, 0x19, 0xa3, 0xff, 0x60, 0xe1, 0xf2, 0xa4, 0x37, 0xaa, 0x86, 0x38, 0x51, 0xda}
	data := []byte{0xb6, 0x26, 0x3f, 0x22, 0x25, 0xbc, 0x37, 0x82, 0x9d, 0xbd, 0xdc, 0x44, 0x0, 0xb2, 0xaa, 0xe9, 0x43, 0x37, 0x25, 0x97, 0x37, 0xed, 0xb3, 0x2f, 0xb4, 0xda, 0x6d, 0x7f, 0x86, 0xd7, 0x10, 0x9f, 0x12, 0x95, 0xd8, 0xb8, 0x14, 0xd5, 0xe3, 0xf8, 0x1f, 0x6c, 0xb, 0xf6, 0x7a, 0x4f, 0xd4, 0xf, 0xaf, 0x14, 0x28, 0xfb, 0x78, 0x38, 0xb9, 0xea, 0x73, 0x30, 0x3f, 0xa3, 0xff, 0x60}
	offset := 5
	r, err := xor.NewReader(bytes.NewReader(data), key, offset)
	if err != nil {
		return nil, err
	}
	uncompress, err := gzip.NewReader(r)
	if err != nil {
		return nil, err
	}
	var out bytes.Buffer
	_, err = io.Copy(&out, uncompress)
	if err != nil {
		return nil, err
	}
	uncompress.Close()
	return out.Bytes(), nil
}

func StreamTest_txt() (io.Reader, error) {
	key := []byte{0xba, 0x15, 0xf1, 0x45, 0x9d, 0xa9, 0xad, 0x37, 0x22, 0x25, 0xbc, 0x37, 0x82, 0x9f, 0x42, 0xae, 0x10, 0x28, 0xfb, 0x87, 0xc7, 0x12, 0xff, 0x68, 0xba, 0x19, 0xa3, 0xff, 0x60, 0xe1, 0xf2, 0xa4, 0x37, 0xaa, 0x86, 0x38, 0x51, 0xda}
	data := []byte{0xb6, 0x26, 0x3f, 0x22, 0x25, 0xbc, 0x37, 0x82, 0x9d, 0xbd, 0xdc, 0x44, 0x0, 0xb2, 0xaa, 0xe9, 0x43, 0x37, 0x25, 0x97, 0x37, 0xed, 0xb3, 0x2f, 0xb4, 0xda, 0x6d, 0x7f, 0x86, 0xd7, 0x10, 0x9f, 0x12, 0x95, 0xd8, 0xb8, 0x14, 0xd5, 0xe3, 0xf8, 0x1f, 0x6c, 0xb, 0xf6, 0x7a, 0x4f, 0xd4, 0xf, 0xaf, 0x14, 0x28, 0xfb, 0x78, 0x38, 0xb9, 0xea, 0x73, 0x30, 0x3f, 0xa3, 0xff, 0x60}
	offset := 5
	r, err := xor.NewReader(bytes.NewReader(data), key, offset)
	if err != nil {
		return nil, err
	}
	return gzip.NewReader(r)
}
