// Code generated by xorgen, DO NOT EDIT.
package tmpl

import (
	"bytes"
	"compress/gzip"
	"github.com/saylorsolutions/gocryptx/pkg/xor"
	"io"
)

func unscreenTest_txt() ([]byte, error) {
	key := []byte{0xdb, 0xfd, 0x4e, 0xac, 0x38, 0xf5, 0xa, 0xef, 0xce, 0xa8, 0xf8, 0xfe, 0xbb, 0xc8, 0xc9, 0x40, 0x7, 0x5f, 0x71, 0xd8}
	data := []byte{0xd7, 0x42, 0x48, 0x7, 0x5f, 0x71, 0xd8, 0xdb, 0xff, 0xb1, 0xde, 0x6c, 0xdd, 0x43, 0xc2, 0xe0, 0xf9, 0x30, 0xb3, 0x96, 0xe6, 0x87, 0xc, 0x48, 0xa, 0x59, 0x11, 0x93, 0xd1, 0x1f, 0x84, 0xf6, 0x3d, 0x25, 0x22, 0x87, 0xf9, 0xb0, 0xb4, 0xee, 0xe0, 0x87, 0x6e, 0x4d, 0x12, 0xbc, 0x93, 0x96, 0xfc, 0x4a, 0xac, 0x38, 0xa, 0xf5, 0x44, 0xdb, 0xb3, 0x72, 0xd8, 0xbb, 0xc8, 0xc9}
	offset := 13
	r, err := xor.NewReader(bytes.NewReader(data), key, offset)
	if err != nil {
		return nil, err
	}
	uncompress, err := gzip.NewReader(r)
	if err != nil {
		return nil, err
	}
	var out bytes.Buffer
	_, err = io.Copy(&out, uncompress)
	if err != nil {
		return nil, err
	}
	uncompress.Close()
	return out.Bytes(), nil
}
